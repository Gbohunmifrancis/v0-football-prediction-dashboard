// <auto-generated />
using System;
using FootballPrediction.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballPrediction.Infrastructure.Migrations
{
    [DbContext(typeof(FplDbContext))]
    partial class FplDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("FootballPrediction.Core.Entities.Fixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Finished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FplId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gameweek")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameweekDataId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("KickoffTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ProvisionalStartTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Started")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamAwayId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamAwayScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamHomeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamHomeScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameweekDataId");

                    b.HasIndex("TeamAwayId");

                    b.HasIndex("TeamHomeId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.GameweekData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AverageScore")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ChipPlays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeadlineTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gameweek")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HighestScore")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TransfersMade")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GameweekData");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.HistoricalPlayerPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AssistsPerGame")
                        .HasColumnType("TEXT");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CleanSheets")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Creativity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Form5Games")
                        .HasColumnType("TEXT");

                    b.Property<int>("FplPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gameweek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Goals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("GoalsPerGame")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HomeAwayForm")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("IctIndex")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Influence")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPlayingNextWeek")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MinutesPerGame")
                        .HasColumnType("TEXT");

                    b.Property<int>("OpponentScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpponentStrength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpponentTeam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OwnershipPercent")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasPrecision(18, 2)
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PointsPerMillion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("RedCards")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Saves")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Threat")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YellowCards")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("HistoricalPlayerPerformances");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.HistoricalTeamStrength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AttackStrengthAway")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AttackStrengthHome")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DefenseStrengthAway")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DefenseStrengthHome")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HistoricalTeamStrengths");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.InjuryUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InjuryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("InjuryUpdates");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bps")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChanceOfPlayingNextRound")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChanceOfPlayingThisRound")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CleanSheets")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Creativity")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Form")
                        .HasColumnType("TEXT");

                    b.Property<int>("FplId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Goals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("IctIndex")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Influence")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("News")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NewsAdded")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PointsPerGame")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("RedCards")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Saves")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SelectedByPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Threat")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransfersIn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransfersOut")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ValueForm")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValueSeason")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YellowCards")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.PlayerFixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FixtureId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerFixture");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.PlayerGameweekPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CleanSheets")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Creativity")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gameweek")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameweekDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Goals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("IctIndex")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Influence")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("KickoffTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpponentScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpponentTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnGoals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PenaltiesMissed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PenaltiesSaved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RedCards")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Saves")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Threat")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YellowCards")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameweekDataId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGameweekPerformances");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.PlayerPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AssistsPrediction")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BonusPrediction")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CleanSheetChance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Confidence")
                        .HasColumnType("TEXT");

                    b.Property<string>("FixtureDifficulty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FormAnalysis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gameweek")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("GoalsPrediction")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InjuryRisk")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinutesLikelihood")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PredictedPoints")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PredictionDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RotationRisk")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerPredictions");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Draw")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FplId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalDifference")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Loss")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Played")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Strength")
                        .HasPrecision(18, 2)
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthAttackAway")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthAttackHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthDefenceAway")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthDefenceHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthOverallAway")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthOverallHome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Win")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.TransferNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FromTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewsType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reliability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ToTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TransferFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("TransferNews");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.Fixture", b =>
                {
                    b.HasOne("FootballPrediction.Core.Entities.GameweekData", "GameweekData")
                        .WithMany("Fixtures")
                        .HasForeignKey("GameweekDataId");

                    b.HasOne("FootballPrediction.Core.Entities.Team", "TeamAway")
                        .WithMany("AwayFixtures")
                        .HasForeignKey("TeamAwayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballPrediction.Core.Entities.Team", "TeamHome")
                        .WithMany("HomeFixtures")
                        .HasForeignKey("TeamHomeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameweekData");

                    b.Navigation("TeamAway");

                    b.Navigation("TeamHome");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.HistoricalPlayerPerformance", b =>
                {
                    b.HasOne("FootballPrediction.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballPrediction.Core.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.InjuryUpdate", b =>
                {
                    b.HasOne("FootballPrediction.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.Player", b =>
                {
                    b.HasOne("FootballPrediction.Core.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.PlayerFixture", b =>
                {
                    b.HasOne("FootballPrediction.Core.Entities.Fixture", "Fixture")
                        .WithMany("PlayerFixtures")
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballPrediction.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixture");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.PlayerGameweekPerformance", b =>
                {
                    b.HasOne("FootballPrediction.Core.Entities.GameweekData", "GameweekData")
                        .WithMany("PlayerPerformances")
                        .HasForeignKey("GameweekDataId");

                    b.HasOne("FootballPrediction.Core.Entities.Player", "Player")
                        .WithMany("GameweekPerformances")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameweekData");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.PlayerPrediction", b =>
                {
                    b.HasOne("FootballPrediction.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.TransferNews", b =>
                {
                    b.HasOne("FootballPrediction.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.Fixture", b =>
                {
                    b.Navigation("PlayerFixtures");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.GameweekData", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("PlayerPerformances");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.Player", b =>
                {
                    b.Navigation("GameweekPerformances");
                });

            modelBuilder.Entity("FootballPrediction.Core.Entities.Team", b =>
                {
                    b.Navigation("AwayFixtures");

                    b.Navigation("HomeFixtures");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
